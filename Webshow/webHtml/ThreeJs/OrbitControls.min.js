THREE.OrbitControls = function (e, t) { var n, o, a, i, s; this.object = e, this.domElement = void 0 !== t ? t : document, this.enabled = !0, this.target = new THREE.Vector3, this.minDistance = 0, this.maxDistance = 1 / 0, this.minZoom = 0, this.maxZoom = 1 / 0, this.minPolarAngle = 0, this.maxPolarAngle = Math.PI, this.minAzimuthAngle = -1 / 0, this.maxAzimuthAngle = 1 / 0, this.enableDamping = !1, this.dampingFactor = .25, this.enableZoom = !0, this.zoomSpeed = 1, this.enableRotate = !0, this.rotateSpeed = 1, this.enablePan = !0, this.panSpeed = 1, this.screenSpacePanning = !1, this.keyPanSpeed = 7, this.autoRotate = !1, this.autoRotateSpeed = 2, this.enableKeys = !0, this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 }, this.mouseButtons = { LEFT: THREE.MOUSE.LEFT, MIDDLE: THREE.MOUSE.MIDDLE, RIGHT: THREE.MOUSE.RIGHT }, this.target0 = this.target.clone(), this.position0 = this.object.position.clone(), this.zoom0 = this.object.zoom, this.getPolarAngle = function () { return p.phi }, this.getAzimuthalAngle = function () { return p.theta }, this.saveState = function () { c.target0.copy(c.target), c.position0.copy(c.object.position), c.zoom0 = c.object.zoom }, this.reset = function () { c.target.copy(c.target0), c.object.position.copy(c.position0), c.object.zoom = c.zoom0, c.object.updateProjectionMatrix(), c.dispatchEvent(r), c.update(), u = m.NONE }, this.update = (n = new THREE.Vector3, o = (new THREE.Quaternion).setFromUnitVectors(e.up, new THREE.Vector3(0, 1, 0)), a = o.clone().inverse(), i = new THREE.Vector3, s = new THREE.Quaternion, function () { var e = c.object.position; return n.copy(e).sub(c.target), n.applyQuaternion(o), p.setFromVector3(n), c.autoRotate && u === m.NONE && C(2 * Math.PI / 60 / 60 * c.autoRotateSpeed), p.theta += E.theta, p.phi += E.phi, p.theta = Math.max(c.minAzimuthAngle, Math.min(c.maxAzimuthAngle, p.theta)), p.phi = Math.max(c.minPolarAngle, Math.min(c.maxPolarAngle, p.phi)), p.makeSafe(), p.radius *= b, p.radius = Math.max(c.minDistance, Math.min(c.maxDistance, p.radius)), c.target.add(g), n.setFromSpherical(p), n.applyQuaternion(a), e.copy(c.target).add(n), c.object.lookAt(c.target), !0 === c.enableDamping ? (E.theta *= 1 - c.dampingFactor, E.phi *= 1 - c.dampingFactor, g.multiplyScalar(1 - c.dampingFactor)) : (E.set(0, 0, 0), g.set(0, 0, 0)), b = 1, !!(T || i.distanceToSquared(c.object.position) > h || 8 * (1 - s.dot(c.object.quaternion)) > h) && (c.dispatchEvent(r), i.copy(c.object.position), s.copy(c.object.quaternion), !(T = !1)) }), this.dispose = function () { c.domElement.removeEventListener("contextmenu", G, !1), c.domElement.removeEventListener("mousedown", V, !1), c.domElement.removeEventListener("wheel", F, !1), c.domElement.removeEventListener("touchstart", I, !1), c.domElement.removeEventListener("touchend", K, !1), c.domElement.removeEventListener("touchmove", _, !1), document.removeEventListener("mousemove", z, !1), document.removeEventListener("mouseup", X, !1), window.removeEventListener("keydown", Z, !1) }; var c = this, r = { type: "change" }, l = { type: "start" }, d = { type: "end" }, m = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY_PAN: 4, TOUCH_PAN: 5 }, u = m.NONE, h = 1e-6, p = new THREE.Spherical, E = new THREE.Spherical, b = 1, g = new THREE.Vector3, T = !1, v = new THREE.Vector2, R = new THREE.Vector2, f = new THREE.Vector2, y = new THREE.Vector2, w = new THREE.Vector2, O = new THREE.Vector2, P = new THREE.Vector2, H = new THREE.Vector2, j = new THREE.Vector2; function M() { return Math.pow(.95, c.zoomSpeed) } function C(e) { E.theta -= e } function N(e) { E.phi -= e } this.gamePad = [null, null, null, null], this.gamePadThread = [null, null, null, null]; var x, L, S, A = (x = new THREE.Vector3, function (e, t) { x.setFromMatrixColumn(t, 0), x.multiplyScalar(-e), g.add(x) }), k = (L = new THREE.Vector3, function (e, t) { !0 === c.screenSpacePanning ? L.setFromMatrixColumn(t, 1) : (L.setFromMatrixColumn(t, 0), L.crossVectors(c.object.up, L)), L.multiplyScalar(e), g.add(L) }), D = (S = new THREE.Vector3, function (e, t) { var n, o = c.domElement === document ? c.domElement.body : c.domElement; c.object.isPerspectiveCamera ? (n = c.object.position, S.copy(n).sub(c.target), n = S.length(), n *= Math.tan(c.object.fov / 2 * Math.PI / 180), A(2 * e * n / o.clientHeight, c.object.matrix), k(2 * t * n / o.clientHeight, c.object.matrix)) : c.object.isOrthographicCamera ? (A(e * (c.object.right - c.object.left) / c.object.zoom / o.clientWidth, c.object.matrix), k(t * (c.object.top - c.object.bottom) / c.object.zoom / o.clientHeight, c.object.matrix)) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."), c.enablePan = !1) }); function Y(e) { c.object.isPerspectiveCamera ? b /= e : c.object.isOrthographicCamera ? (c.object.zoom = Math.max(c.minZoom, Math.min(c.maxZoom, c.object.zoom * e)), c.object.updateProjectionMatrix(), T = !0) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), c.enableZoom = !1) } function U(e) { c.object.isPerspectiveCamera ? b *= e : c.object.isOrthographicCamera ? (c.object.zoom = Math.max(c.minZoom, Math.min(c.maxZoom, c.object.zoom / e)), c.object.updateProjectionMatrix(), T = !0) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), c.enableZoom = !1) } function V(e) { if (!1 !== c.enabled) { if (e.preventDefault(), (c.domElement.focus ? c.domElement : window).focus(), e.button === c.mouseButtons.LEFT) if ("rotate" === objMain.panOrRotate) { if (!1 === c.enableRotate) return; t = e, v.set(t.clientX, t.clientY), u = m.ROTATE } else { if (!1 === c.enablePan) return; e = e, y.set(e.clientX, e.clientY), u = m.PAN } var t; u !== m.NONE && (document.addEventListener("mousemove", z, !1), document.addEventListener("mouseup", X, !1), c.dispatchEvent(l)) } } function z(e) { var t, n; if (!1 !== c.enabled) switch (e.preventDefault(), u) { case m.ROTATE: if (!1 === c.enableRotate) return; n = e, R.set(n.clientX, n.clientY), f.subVectors(R, v).multiplyScalar(c.rotateSpeed), n = c.domElement === document ? c.domElement.body : c.domElement, C(2 * Math.PI * f.x / n.clientHeight), N(2 * Math.PI * f.y / n.clientHeight), v.copy(R), c.update(); break; case m.DOLLY: if (!1 === c.enableZoom) return; t = e, H.set(t.clientX, t.clientY), j.subVectors(H, P), 0 < j.y ? Y(M()) : j.y < 0 && U(M()), P.copy(H), c.update(); break; case m.PAN: if (!1 === c.enablePan) return; t = e, w.set(t.clientX, t.clientY), O.subVectors(w, y).multiplyScalar(c.panSpeed), D(O.x, O.y), y.copy(w), c.update() } } function X(e) { !1 !== c.enabled && (document.removeEventListener("mousemove", z, !1), document.removeEventListener("mouseup", X, !1), c.dispatchEvent(d), u = m.NONE) } function F(e) { !1 === c.enabled || !1 === c.enableZoom || u !== m.NONE && u !== m.ROTATE || (e.preventDefault(), e.stopPropagation(), c.dispatchEvent(l), (e = e).deltaY < 0 ? U(M()) : 0 < e.deltaY && Y(M()), c.update(), c.dispatchEvent(d)) } function Z(e) { !1 !== c.enabled && !1 !== c.enableKeys && !1 !== c.enablePan && function (e) { var t = !1; switch (e.keyCode) { case c.keys.UP: D(0, c.keyPanSpeed), t = !0; break; case c.keys.BOTTOM: D(0, -c.keyPanSpeed), t = !0; break; case c.keys.LEFT: D(c.keyPanSpeed, 0), t = !0; break; case c.keys.RIGHT: D(-c.keyPanSpeed, 0), t = !0 }t && (e.preventDefault(), c.update()) }(e) } function I(e) { if (null != window.touchEndEventSelfRegester && window.touchEndEventSelfRegester(e), !1 !== c.enabled) { switch (e.preventDefault(), e.touches.length) { case 1: if (!1 === c.enableRotate) return; if ("rotate" === objMain.panOrRotate) { if (!1 === c.enableRotate) return; o = e, v.set(o.touches[0].pageX, o.touches[0].pageY), u = m.TOUCH_ROTATE } else { if (!1 === c.enablePan) return; n = e, y.set(n.touches[0].clientX, n.touches[0].clientY), u = m.TOUCH_PAN } objMain.clicktrail.drawPoint0(e.touches[0].clientX, e.touches[0].clientY); break; case 2: if (!1 === c.enableZoom && !1 === c.enablePan) return; o = e, c.enableZoom && (n = o.touches[0].pageX - o.touches[1].pageX, t = o.touches[0].pageY - o.touches[1].pageY, t = Math.sqrt(n * n + t * t), P.set(0, t)), c.enablePan && (t = .5 * (o.touches[0].pageX + o.touches[1].pageX), o = .5 * (o.touches[0].pageY + o.touches[1].pageY), y.set(t, o)), u = m.TOUCH_DOLLY_PAN, objMain.clicktrail.drawPoint0(e.touches[0].clientX, e.touches[0].clientY), objMain.clicktrail.drawPoint1(e.touches[1].clientX, e.touches[1].clientY); break; default: u = m.NONE }var t, n, o; u !== m.NONE && c.dispatchEvent(l) } } function _(e) { var t, n, o; if (!1 !== c.enabled) switch (e.preventDefault(), e.stopPropagation(), e.touches.length) { case 1: if (!1 === c.enableRotate) return; if (u !== m.TOUCH_ROTATE && u !== m.TOUCH_PAN) return; "rotate" === objMain.panOrRotate ? (o = e, R.set(o.touches[0].pageX, o.touches[0].pageY), f.subVectors(R, v).multiplyScalar(c.rotateSpeed), o = c.domElement === document ? c.domElement.body : c.domElement, C(2 * Math.PI * f.x / o.clientHeight), N(2 * Math.PI * f.y / o.clientHeight), v.copy(R)) : (n = e, w.set(n.touches[0].clientX, n.touches[0].clientY), O.subVectors(w, y).multiplyScalar(c.panSpeed), D(O.x, O.y), y.copy(w)), c.update(), objMain.clicktrail.line0(e.touches[0].clientX, e.touches[0].clientY); break; case 2: if (!1 === c.enableZoom && !1 === c.enablePan) return; if (u !== m.TOUCH_DOLLY_PAN) return; o = e, c.enableZoom && (n = o.touches[0].pageX - o.touches[1].pageX, t = o.touches[0].pageY - o.touches[1].pageY, t = Math.sqrt(n * n + t * t), H.set(0, t), j.set(0, Math.pow(H.y / P.y, c.zoomSpeed)), Y(j.y), P.copy(H)), c.enablePan && (t = .5 * (o.touches[0].pageX + o.touches[1].pageX), o = .5 * (o.touches[0].pageY + o.touches[1].pageY), w.set(t, o), O.subVectors(w, y).multiplyScalar(c.panSpeed), D(O.x, O.y), y.copy(w)), c.update(), objMain.clicktrail.line0(e.touches[0].clientX, e.touches[0].clientY), objMain.clicktrail.line1(e.touches[1].clientX, e.touches[1].clientY); break; default: u = m.NONE } } function K(e) { !1 !== c.enabled && (c.dispatchEvent(d), u = m.NONE, objMain.clicktrail.clear()) } function G(e) { !1 !== c.enabled && e.preventDefault() } c.domElement.addEventListener("contextmenu", G, !1), c.domElement.addEventListener("mousedown", V, !1), c.domElement.addEventListener("wheel", F, !1), c.domElement.addEventListener("touchstart", I, !1), c.domElement.addEventListener("touchend", K, !1), c.domElement.addEventListener("touchmove", _, !1), window.addEventListener("gamepadconnected", function (e) { var a, i = window.c; console.log("A gamepad connected:"), console.log(e.gamepad), e.gamepad.index < 4 && (a = null, a = e.gamepad.index, c.gamePad[e.gamepad.index] = e.gamepad, c.gamePadThread[a] = setInterval(() => { var e, t, n, o; null != c.gamePad[a] && (n = (o = navigator.getGamepads()[a]).axes[0], t = o.axes[1], .05 < (e = Math.sqrt(n * n + t * t)) && (o = new i(n / e, -t / e), n = c.object, e = (t = c.target).x - n.position.x, t = t.z - n.position.z, .001 < (n = Math.sqrt(e * e + t * t)) && (n = new i(e / n, -t / n).divide(o), Math.abs(n.r) < 1 && (NaN != (o = Math.acos(n.r)) && (0 < n.i ? C(o) : C(-o))), c.update()))) }, 100)) }), window.addEventListener("keydown", Z, !1), this.update() }, THREE.OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype), THREE.OrbitControls.prototype.constructor = THREE.OrbitControls, Object.defineProperties(THREE.OrbitControls.prototype, { center: { get: function () { return console.warn("THREE.OrbitControls: .center has been renamed to .target"), this.target } }, noZoom: { get: function () { return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."), !this.enableZoom }, set: function (e) { console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."), this.enableZoom = !e } }, noRotate: { get: function () { return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."), !this.enableRotate }, set: function (e) { console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."), this.enableRotate = !e } }, noPan: { get: function () { return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."), !this.enablePan }, set: function (e) { console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."), this.enablePan = !e } }, noKeys: { get: function () { return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."), !this.enableKeys }, set: function (e) { console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."), this.enableKeys = !e } }, staticMoving: { get: function () { return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."), !this.enableDamping }, set: function (e) { console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."), this.enableDamping = !e } }, dynamicDampingFactor: { get: function () { return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."), this.dampingFactor }, set: function (e) { console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."), this.dampingFactor = e } } });